# bump
# This references the default Python container from
# the Docker Hub with the 2.7 tag:
# https://registry.hub.docker.com/_/python/
# If you want to use a slim Python container with
# version 3.4.3 you would use: python:3.4-slim
# If you want Google's container you would reference google/python
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: python:2.7
# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html
services:
- redis
- id: mysql
  env:
    MYSQL_ROOT_PASSWORD: testpass

push-debug-ecr:
  steps:
    - pip-install:
        requirements_file: ""
        extra_args: "."
    - internal/docker-push:
        aws-access-key: $AWS_ACCESS_KEY_ID
        aws-secret-key: $AWS_SECRET_ACCESS_KEY
        aws-region: $AWS_ECS_REGION
        aws-registry-id: $AWS_REGISTRY_ID
        repository: testing2
        tag: debug-$WERCKER_GIT_BRANCH
        registry: $AWS_REGISTRY_URL 

deploy-to-debug-ecs:
  box: python:2.7-slim
  steps:
    - script:
        name: template
        code: ./ecs_deployment_template.sh
    - 1science/aws-ecs:
        key: $AWS_ACCESS_KEY_ID
        secret: $AWS_SECRET_ACCESS_KEY
        region: $AWS_ECS_REGION
        cluster-name: testing2
        service-name: testing2
        task-definition-name: workflows-demo
        task-definition-file: $WERCKER_SOURCE_DIR/workflows-demo-task-definition.json
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
build:
  steps:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
    # A step that sets up the python virtual environment
    #- virtualenv:
    #    name: setup virtual environment
    #    install_wheel: false # Enable wheel to speed up builds (experimental)

    # # Use this virtualenv step for python 3.2
    # - virtualenv
    #     name: setup virtual environment
    #     python_location: /usr/bin/python3.2

    # A step that executes `pip install` command.
    - pip-install:
        requirements_file: ""
        extra_args: "."

unit-tests:
    - pip-install:
        requirements_file: ""
        extra_args: "."
    - pip-install:
        requirements_file: "developer_requirements.txt"
    - script:
        name: Install mysql CLI
        code: |
            apt-get update -y && apt-get install mysql-client -y
    - script:
        name: Create database
        code: mysql -h$MYSQL_PORT_3306_TCP_ADDR -P$MYSQL_PORT_3306_TCP_PORT -uroot -p$MYSQL_ENV_MYSQL_ROOT_PASSWORD -e "CREATE DATABASE IF NOT EXISTS haralyzer_api_test;"
    - script:
        name: Migrate database
        code: python manage.py db upgrade
    - script:
        name: Run unit tests
        code: py.test -s -v tests/

dev:
  services:
    - id: mysql
      env:
        MYSQL_ROOT_PASSWORD: testpass
    - id: redis
  steps:
    - virtualenv:
        name: setup virtual environment
        install_wheel: false # Enable wheel to speed up builds (experimental)
    - pip-install:
        requirements_file: ""
        extra_args: "."
    - pip-install:
        requirements_file: "developer_requirements.txt"
    - script:
        name: Install mysql CLI
        code: |
            apt-get update -y && apt-get install mysql-client -y
    - script:
        name: Create database
        code: mysql -h$MYSQL_PORT_3306_TCP_ADDR -P$MYSQL_PORT_3306_TCP_PORT -uroot -p$MYSQL_ENV_MYSQL_ROOT_PASSWORD -e "CREATE DATABASE IF NOT EXISTS haralyzer_api_test;"
    - script:
        name: Migrate database
        code: python manage.py db upgrade
    - internal/watch:
        name: start web server
        code: python manage.py runserver -h 0.0.0.0
        reload: true
